/* global describe, it, expect */
import { parse } from '../src/fromTransformAttribute.autogenerated'

// credits: github:nidu/svg-transform-parser

describe('fromTransformAttribute.pegjs', () => {
  describe('atomic transformations', () => {
    it('should parse single matrices', () => {
      expect(parse('translate(1.6,65.44)')).toEqual([{ type: 'translate', tx: 1.6, ty: 65.44 }])

      expect(parse('translate(777)')).toEqual([{ type: 'translate', tx: 777 }])

      expect(parse('rotate(51)')).toEqual([{ type: 'rotate', angle: 51 }])

      expect(parse('rotate(46 51, 18.57)')).toEqual([{ type: 'rotate', angle: 46, cx: 51, cy: 18.57 }])

      expect(parse('skewX(19.08)')).toEqual([{ type: 'skewX', angle: 19.08 }])

      expect(parse('skewY(56.11)')).toEqual([{ type: 'skewY', angle: 56.11 }])

      expect(parse('matrix(1 2 3,4,5 6)')).toEqual([{ type: 'matrix', a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 }])

      expect(parse('matrix(6.123233995736766e-17,1,-1,6.123233995736766e-17,440,-350)'))
        .toEqual([{ type: 'matrix', a: 6.123233995736766e-17, b: 1, c: -1, d: 6.123233995736766e-17, e: 440, f: -350 }])
    })

    it('should throw exception', () => {
      expect(parse.bind(this, 'rotate(46 51)')).toThrow()
      expect(parse.bind(this, 'skewX(19.08, 4)')).toThrow()
      expect(parse.bind(this, 'matrix(1 2 3,45 6)')).toThrow()
    })
  })

  describe('exponential values', () => {
    it('should parse without errors', () => {
      // it is tested with rotate function, but it doesn't matter because any parser make use of the same number parser
      expect(parse('rotate(1e1)')).toEqual([{ type: 'rotate', angle: 1e1 }])
      expect(parse('rotate(-1e1)')).toEqual([{ type: 'rotate', angle: -1e1 }])
      expect(parse('rotate(1e-1)')).toEqual([{ type: 'rotate', angle: 1e-1 }])
      expect(parse('rotate(-1e-1)')).toEqual([{ type: 'rotate', angle: -1e-1 }])

      expect(parse('rotate(1.1e1)')).toEqual([{ type: 'rotate', angle: 1.1e1 }])
      expect(parse('rotate(-1.1e1)')).toEqual([{ type: 'rotate', angle: -1.1e1 }])
      expect(parse('rotate(1.1e-1)')).toEqual([{ type: 'rotate', angle: 1.1e-1 }])
      expect(parse('rotate(-1.1e-1)')).toEqual([{ type: 'rotate', angle: -1.1e-1 }])
    })
  })

  describe('complex transformations', () => {
    it('should parse in the right order', () => {
      expect(parse('translate(1,2) translate(3,4) translate(5,6)')).toEqual([
        { type: 'translate', tx: 1, ty: 2 },
        { type: 'translate', tx: 3, ty: 4 },
        { type: 'translate', tx: 5, ty: 6 }
      ])
    })

    it('should parse multiple matrices', () => {
      expect(
        parse('translate(1,-1),rotate(2 0.2 0.5) skewX(3.3)  skewY(4),matrix(6,5,4,3,2,1)')
      ).toEqual([
        { type: 'translate', tx: 1, ty: -1 },
        { type: 'rotate', angle: 2, cx: 0.2, cy: 0.5 },
        { type: 'skewX', angle: 3.3 },
        { type: 'skewY', angle: 4 },
        { type: 'matrix', a: 6, b: 5, c: 4, d: 3, e: 2, f: 1 }
      ])
    })
  })
})
